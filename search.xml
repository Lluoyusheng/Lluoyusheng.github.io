<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++学习篇（一）</title>
      <link href="/2021/11/26/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/11/26/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="C-学习篇（一）：类与对象-1"><a href="#C-学习篇（一）：类与对象-1" class="headerlink" title="C++学习篇（一）：类与对象(1)"></a>C++学习篇（一）：类与对象(1)</h2><p><strong>前提说明</strong>：本人因运气不好在大二的时候没有选到C++因而得自食其力的在网上找教程学，加上本人是一个编程小白，因此将学习C++的过程整理成博客以记录学习进度，总结学习经验。</p><h3 id="1-类的构成"><a href="#1-类的构成" class="headerlink" title="1.类的构成"></a>1.类的构成</h3><p>类声明中的内容包括数据和函数，分别称为数据成员和成员函数。按访问权限划分，数据成员和成员函数又可分为共有、保护和私有3种。</p><pre class=" language-C++"><code class="language-C++">class ClassName&#123;    public:        data;        function;    protected:        data;        function;    private:        data;        function;&#125;;</code></pre><p>例如时钟类</p><pre class=" language-C++"><code class="language-C++">class Clock&#123;    public:        void setClock(int h, int m, int s);    private:        int h,m,s;&#125;;</code></pre><p>值得注意的是，三者的出场顺序可以随意，且private可以省略。</p><h3 id="2-成员函数的定义"><a href="#2-成员函数的定义" class="headerlink" title="2.成员函数的定义"></a>2.成员函数的定义</h3><p><strong>2.1普通成员函数的定义</strong></p><p>在类的声明中只给出成员函数的原型，而成员函数的定义写在类的外部。这种成员函数在类外定义的一般形式是：</p><blockquote><p>返回值类型 类名::成员函数名(参数表){    函数体}</p></blockquote><p>例如：</p><pre class=" language-C++"><code class="language-C++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s);        void showClock();&#125;;void Clock::setClock(int h,int m,int s)&#123;    H = h;    M = m;    S = s;&#125;void Clock::showClock()&#123;    cout << "现在时间时：" << H << ":" << M << ":" << S << endl;&#125;；</code></pre><p><strong>2.2内联成员函数的定义</strong></p><p>隐式声明</p><pre class=" language-c++"><code class="language-c++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s)&#123;        H = h;        M = m;        S = s;    &#125;        void showClock()&#123;        cout << "现在时间时：" << H << ":" << M << ":" << S << endl;    &#125;&#125;;</code></pre><p>显式声明</p><pre class=" language-c++"><code class="language-c++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s);        void showClock();&#125;;inline void Clock::setClock(int h,int m,int s)&#123;    H = h;    M = m;    S = s;&#125;inline void Clock::showClock()&#123;    cout << "现在时间时：" << H << ":" << M <<":" << S << endl;&#125;</code></pre><p><strong>说明</strong>：在类中，使用inline定义内联函数时，必须将类的声明和内联成员函数的定义都放在同一个文件（或同一个头文件）中，否则编译时无法进行代码置换。</p><p><strong>2.3对象的定义与使用</strong></p><p>对象的定义有两种，可以在声明的同时定义，也可以声明后定义。</p><p>类对象的访问也有两种，一种是.，一种是-&gt;，其中-&gt;对应的是指针变量。</p><p>对象赋值：</p><pre class=" language-c++"><code class="language-c++">Clock op;op.setClock(2,12,32);op.showClock();</code></pre><hr><p>持续更新，但速度可能emmmm（懂的都懂hh）</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++；类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/11/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/11/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>第一篇博客（其实算第二篇，因为自动生成了hello world哈哈哈哈哈）主要是想记录一下自己写博客的生涯，之前写记录都是在记事本里写，感觉没有那味儿，在William同学的指导下，搭建了自己的博客，开启了我的博客生涯。</p><p>初来乍到，请多指教！</p><p>我会持续更新我的算法题解已经其他的相关学习上的问题与解答，欢迎大家与我一起讨论hhh~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/23/hello-world/"/>
      <url>/2021/11/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
