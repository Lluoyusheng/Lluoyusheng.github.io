<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++学习篇（二）</title>
      <link href="/2021/11/28/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/11/28/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="C-学习篇之构造函数与析构函数"><a href="#C-学习篇之构造函数与析构函数" class="headerlink" title="C++学习篇之构造函数与析构函数"></a>C++学习篇之构造函数与析构函数</h2><h3 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h3><p>构造函数是一种特殊的成员函数，它主要用于为对象分配空间，进行初始化。<strong>构造函数的名字必须与类名相同，而不能由用户任意命名。</strong>它可以有任意类型的参数，但不能具有返回值。它不需要用户来调用，而是在建立对象时自动执行。</p><pre class=" language-c++"><code class="language-c++">class Score&#123;public:    Score(int m, int f);  //构造函数    void setScore(int m, int f);    void showScore();private:    int mid_exam;    int fin_exam;&#125;;Score::Score(int m, int f)&#123;    mid_exam = m;    fin_exam = f;&#125;</code></pre><p>建立对象的同时，给构造函数的数据成员赋值的形式有两种：</p><pre class=" language-c++"><code class="language-c++">// 1.类名 对象名[(实参表)]Score op1(99, 100);op1.showScore();// 2.类名 *指针变量名 = new 类名[(实参表)]Score *p;p = new Score(99, 100);p->showScore();---------------------------------------------------------------------------------Score *p = new Score(99, 100);p->showScore();</code></pre><p><strong>说明</strong>：</p><blockquote><ul><li>构造函数的名字<strong>必须与类名相同</strong>，否则编译程序将把它当做一般的成员函数来处理。</li><li>构造函数没有返回值，在定义构造函数时，是不能说明它的类型的。</li><li>与普通的成员函数一样，构造函数的函数体可以写在类体内，也可写在类体外。</li><li>构造函数一般声明为共有成员，但它不需要也不能像其他成员函数那样被显式地调用，它是定义对象的同时被自动调用，而且只执行一次。</li><li>构造函数可以不带参数。</li></ul></blockquote><h4 id="拷贝构造函数（复制构造函数）"><a href="#拷贝构造函数（复制构造函数）" class="headerlink" title="拷贝构造函数（复制构造函数）"></a><strong>拷贝构造函数</strong>（复制构造函数）</h4><p>功能：用一个已有的对象来初始化另一个新创建的同类对象。</p><blockquote><p>拷贝构造函数的声明形式：<strong>类名(类名&amp; ); 或 类名(类名&amp; 对象名)</strong>;</p></blockquote><p>例如：</p><pre class=" language-c++"><code class="language-c++">class cat &#123;    int age;   float weight;   char* color;  public:    cat();    cat(cat &);    //拷贝构造函数的声明    void plus()&#123;age++;&#125;    void hunt();&#125;; cat::cat(cat& other)&#123;  age = other.age;  weight = other.weight;  color = other.color;&#125; </code></pre><p>调用拷贝构造函数的三种情况：</p><ul><li>当用类的一个对象去初始化该类的另一个对象时；</li><li>当函数的形参是类的对象，调用函数进行形参和实参结合时；</li><li>当函数的返回值是对象，函数执行完成返回调用者时。</li></ul><p><strong>浅拷贝和深拷贝</strong></p><blockquote><p>拷贝构造函数分为两种：浅拷贝构造函数和深拷贝构造函数。C++提供的默认拷贝构造函数只是对对象进行数据拷贝（逐个数据成员依次拷贝），即只复制对象数据而不复制对象资源。但对于如图3.1所示的第二种情况，浅拷贝构造函数不能有效处理</p></blockquote><p><img src="C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.assets/image-20211128143038419.png" alt="image-20211128143038419"></p><blockquote><p>一般情况下，只需使用编译系统提供的浅拷贝构造函数即可。但是如果对象的数据成员包含指向堆空间的指针等资源时，就不能使用浅拷贝方式，因为两个对象会拥有同一个资源，对象析构时，该资源将经历两次返还。此时，必须自定义深拷贝构造函数，为创建的对象分配堆空间，否则会出现动态分配的指针变量悬空的情况。深拷贝构造函数需要同时复制对象资源和数据，如图3.2所示</p></blockquote><p><img src="C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.assets/image-20211128143224366.png" alt="image-20211128143224366"></p><h3 id="二、析构函数"><a href="#二、析构函数" class="headerlink" title="二、析构函数"></a>二、析构函数</h3><p>类的另一个特殊成员函数是析构函数。析构函数的功能是当对象被撤销时，释放该对象占用的存储空间。析构函数的作用与构造函数正好相反，一般情况下，析构函数执行构造函数的逆操作。在对象被撤销时，编译系统将自动调用析构函数，执行一些对象撤销前的清理任务</p><p>与构造函数相同的是在定义析构函数时，不能指定任何的返回值类型，也不能使用void。与构造函数不同的是构造函数可以带参数，可以重载，而析构函数没有参数，每个类只能有一个析构函数。析构函数的函数名为类名前加~。</p><pre class=" language-c++"><code class="language-c++">class Score&#123;public:    Score(int m = 0, int f = 0);    ~Score();       //析构函数private:    int mid_exam;    int fin_exam;&#125;;Score::Score(int m, int f) : mid_exam(m), fin_exam(f)&#123;    cout << "构造函数使用中..." << endl;&#125;Score::~Score()&#123;    cout << "析构函数使用中..." << endl;&#125;</code></pre><p>1、析构函数的自动调用</p><blockquote><p>（1）一个动态分配的对象被释放，即使用delete删除对象时，编译系统会自动调用析构函数</p><p>（2）一个编译系统创建的临时对象不再需要时</p><p>（3）程序运行结束时</p></blockquote><p>2、析构函数的手工调用</p><p>理论上，构造函数只能由编译系统自动调用，而析构函数可以使用下述方法手工调用：</p><p>​                                                 <strong>对象名.类名::析构函数名();</strong></p><p>3、析构函数与构造函数的调用顺序</p><blockquote><p>构造函数和析构函数的调用顺序刚好相反：先构造的后析构</p></blockquote><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class Student&#123;private:    char *name;    char *stu_no;    float score;public:    Student(char *name1, char *stu_no1, float score1);    ~Student();    void modify(float score1);    void show();&#125;;Student::Student(char *name1, char *stu_no1, float score1)&#123;    name = new char[strlen(name1) + 1];    strcpy(name, name1);    stu_no = new char[strlen(stu_no1) + 1];    strcpy(stu_no, stu_no1);    score = score1;&#125;Student::~Student() &#123;    delete []name;    delete []stu_no;&#125;void Student::modify(float score1) &#123;    score = score1;&#125;void Student::show()&#123;    cout << "姓名: " << name << endl;    cout << "学号: " << stu_no << endl;    cout << "成绩：" << score << endl;&#125;int main()&#123;    Student stu("邻菲无口", "15462421", 99);    stu.modify(100);    stu.show();    return 0;&#125;</code></pre><p>如果没有给定构造函数和析构函数，编译系统会自动生成默认构造函数和析构函数。</p><p>本章学习于<a href="https://blog.csdn.net/weixin_44368437/article/details/117563488?ops_request_misc=%7B%22request_id%22:%22163806200616780265482524%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163806200616780265482524&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-117563488.first_rank_v2_pc_rank_v29&utm_term=C++&spm=1018.2226.3001.4187">《C++面向对象程序设计》✍千处细节、万字总结（建议收藏）_恋风-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习篇（一）</title>
      <link href="/2021/11/26/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/11/26/C-%E5%AD%A6%E4%B9%A0%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="C-学习篇（一）：类与对象-1"><a href="#C-学习篇（一）：类与对象-1" class="headerlink" title="C++学习篇（一）：类与对象(1)"></a>C++学习篇（一）：类与对象(1)</h2><p><strong>前提说明</strong>：本人因运气不好在大二的时候没有选到C++因而得自食其力的在网上找教程学，加上本人是一个编程小白，因此将学习C++的过程整理成博客以记录学习进度，总结学习经验。</p><h3 id="1-类的构成"><a href="#1-类的构成" class="headerlink" title="1.类的构成"></a>1.类的构成</h3><p>类声明中的内容包括数据和函数，分别称为数据成员和成员函数。按访问权限划分，数据成员和成员函数又可分为共有、保护和私有3种。</p><pre class=" language-C++"><code class="language-C++">class ClassName&#123;    public:        data;        function;    protected:        data;        function;    private:        data;        function;&#125;;</code></pre><p>例如时钟类</p><pre class=" language-C++"><code class="language-C++">class Clock&#123;    public:        void setClock(int h, int m, int s);    private:        int h,m,s;&#125;;</code></pre><p>值得注意的是，三者的出场顺序可以随意，且private可以省略。</p><h3 id="2-成员函数的定义"><a href="#2-成员函数的定义" class="headerlink" title="2.成员函数的定义"></a>2.成员函数的定义</h3><p><strong>2.1普通成员函数的定义</strong></p><p>在类的声明中只给出成员函数的原型，而成员函数的定义写在类的外部。这种成员函数在类外定义的一般形式是：</p><blockquote><p>返回值类型 类名::成员函数名(参数表){    函数体}</p></blockquote><p>例如：</p><pre class=" language-C++"><code class="language-C++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s);        void showClock();&#125;;void Clock::setClock(int h,int m,int s)&#123;    H = h;    M = m;    S = s;&#125;void Clock::showClock()&#123;    cout << "现在时间时：" << H << ":" << M << ":" << S << endl;&#125;；</code></pre><p><strong>2.2内联成员函数的定义</strong></p><p>隐式声明</p><pre class=" language-c++"><code class="language-c++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s)&#123;        H = h;        M = m;        S = s;    &#125;        void showClock()&#123;        cout << "现在时间时：" << H << ":" << M << ":" << S << endl;    &#125;&#125;;</code></pre><p>显式声明</p><pre class=" language-c++"><code class="language-c++">class Clock&#123;        int H, M, S;    public:        void setClock(int h, int m, int s);        void showClock();&#125;;inline void Clock::setClock(int h,int m,int s)&#123;    H = h;    M = m;    S = s;&#125;inline void Clock::showClock()&#123;    cout << "现在时间时：" << H << ":" << M <<":" << S << endl;&#125;</code></pre><p><strong>说明</strong>：在类中，使用inline定义内联函数时，必须将类的声明和内联成员函数的定义都放在同一个文件（或同一个头文件）中，否则编译时无法进行代码置换。</p><p><strong>2.3对象的定义与使用</strong></p><p>对象的定义有两种，可以在声明的同时定义，也可以声明后定义。</p><p>类对象的访问也有两种，一种是.，一种是-&gt;，其中-&gt;对应的是指针变量。</p><p>对象赋值：</p><pre class=" language-c++"><code class="language-c++">Clock op;op.setClock(2,12,32);op.showClock();</code></pre><hr><p>持续更新，但速度可能emmmm（懂的都懂hh）</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++；类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/11/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/11/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>第一篇博客（其实算第二篇，因为自动生成了hello world哈哈哈哈哈）主要是想记录一下自己写博客的生涯，之前写记录都是在记事本里写，感觉没有那味儿，在William同学的指导下，搭建了自己的博客，开启了我的博客生涯。</p><p>初来乍到，请多指教！</p><p>我会持续更新我的算法题解已经其他的相关学习上的问题与解答，欢迎大家与我一起讨论hhh~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/23/hello-world/"/>
      <url>/2021/11/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
